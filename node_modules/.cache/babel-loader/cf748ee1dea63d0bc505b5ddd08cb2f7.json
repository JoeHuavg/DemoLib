{"remainingRequest":"C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\src\\views\\system\\tasks\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\src\\views\\system\\tasks\\index.vue","mtime":1630326254242},{"path":"C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.function.name\");\n\nvar _tasks = require(\"@/api/system/tasks\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'tasks',\n  data: function data() {\n    var _this = this;\n\n    var cronValidate = function cronValidate(rule, value, callback) {\n      if (_this.form.triggerType === 1) {\n        if (value === '' || value === undefined) {\n          callback(new Error('运行时间表达式不能为空!'));\n        } else {\n          callback();\n        }\n      } else {\n        callback();\n      }\n    };\n\n    var beginTimeValidate = function beginTimeValidate(rule, value, callback) {\n      if (_this.form.triggerType === 0) {\n        if (value === '' || value === undefined) {\n          callback(new Error('选择开始日期!'));\n        } else {\n          callback();\n        }\n      } else {\n        callback();\n      }\n    };\n\n    var endTimeValidate = function endTimeValidate(rule, value, callback) {\n      if (_this.form.triggerType === 0) {\n        if (value === '' || value === undefined) {\n          callback(new Error('选择结束日期!'));\n        } else {\n          callback();\n        }\n      } else {\n        callback();\n      }\n    };\n\n    var intervalSecondValidate = function intervalSecondValidate(rule, value, callback) {\n      if (_this.form.triggerType === 0) {\n        if (value === '' || value === undefined) {\n          callback(new Error('请设置执行间隔!'));\n        } else {\n          callback();\n        }\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      // 是否显示弹出层\n      open: false,\n      // 表单\n      form: {},\n      // 表单标题\n      title: '',\n      // 显示搜索\n      searchToggle: true,\n      // 表格高度\n      tableHeight: window.innerHeight,\n      // 合计条数\n      total: 0,\n      // 遮罩层\n      loading: true,\n      // 查询参数\n      queryParams: {\n        queryText: undefined,\n        pageIndex: 1,\n        pageSize: 10,\n        orderby: 'createTime',\n        sort: 'descending'\n      },\n      // 计划任务列表\n      dataTasks: [],\n      // 触发器类型\n      triggerTypeOptions: [{\n        label: 'Simple / [普通]',\n        value: 0\n      }, {\n        label: 'Cron / [表达式]',\n        value: 1\n      }],\n      // 表单校验\n      rules: {\n        name: [{\n          required: true,\n          message: '任务名称不能为空',\n          trigger: 'blur'\n        }],\n        jobGroup: [{\n          required: true,\n          message: '任务分组不能为空',\n          trigger: 'blur'\n        }],\n        assemblyName: [{\n          required: true,\n          message: '程序集名称不能为空',\n          trigger: 'blur'\n        }],\n        className: [{\n          required: true,\n          message: '任务类名不能为空',\n          trigger: 'blur'\n        }],\n        triggerType: [{\n          required: true,\n          message: '请选择触发器类型',\n          trigger: 'blur'\n        }],\n        cron: [{\n          validator: cronValidate,\n          trigger: 'blur'\n        }],\n        beginTime: [{\n          validator: beginTimeValidate,\n          trigger: 'blur'\n        }],\n        endTime: [{\n          validator: endTimeValidate,\n          trigger: 'blur'\n        }],\n        intervalSecond: [{\n          validator: intervalSecondValidate,\n          type: 'number',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created: function created() {\n    this.getList();\n  },\n  methods: {\n    /** 查询计划任务列表 */\n    getList: function getList() {\n      var _this2 = this;\n\n      this.loading = true;\n      (0, _tasks.queryTasks)(this.queryParams).then(function (response) {\n        _this2.dataTasks = response.data.dataSource;\n        _this2.total = response.data.totalCount;\n        _this2.loading = false;\n      });\n    },\n    handleQuery: function handleQuery() {\n      this.getList();\n    },\n\n    /** 重置按钮操作 */\n    handleReset: function handleReset() {\n      this.queryParams.queryText = '';\n      this.getList();\n    },\n\n    /** 新增按钮操作 */\n    handleCreate: function handleCreate() {\n      this.reset();\n      this.open = true;\n      this.title = '添加计划任务';\n    },\n\n    /** 修改按钮操作 */\n    handleUpdate: function handleUpdate(row) {\n      this.reset();\n      this.form = row;\n      this.open = true;\n      this.title = '修改计划任务';\n    },\n    // 启动按钮\n    handleStart: function handleStart(row) {\n      var _this3 = this;\n\n      (0, _tasks.startTasks)(row.id).then(function (response) {\n        if (response.statusCode === 200) {\n          _this3.$message({\n            message: response.message,\n            type: 'success'\n          });\n\n          _this3.open = false;\n\n          _this3.getList();\n        }\n      });\n    },\n    // 停止按钮\n    handleStop: function handleStop(row) {\n      var _this4 = this;\n\n      (0, _tasks.stopTasks)(row.id).then(function (response) {\n        if (response.statusCode === 200) {\n          _this4.$message({\n            message: response.message,\n            type: 'success'\n          });\n\n          _this4.open = false;\n\n          _this4.getList();\n        }\n      });\n    },\n\n    /** 删除按钮操作 */\n    handleDelete: function handleDelete(row) {\n      var _this5 = this;\n\n      this.$confirm('是否确认删除名称为\"' + row.name + '\"的计划任务?', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        (0, _tasks.deleteTasks)(row.id).then(function (response) {\n          if (response.statusCode === 200) {\n            _this5.getList();\n\n            _this5.$message({\n              message: '删除成功',\n              type: 'success'\n            });\n          }\n        });\n      }).catch(function () {});\n    },\n\n    /** 提交按钮 */\n    submitForm: function submitForm() {\n      var _this6 = this;\n\n      this.$refs['form'].validate(function (valid) {\n        if (valid) {\n          if (_this6.form.id !== undefined) {\n            (0, _tasks.updateTasks)(_this6.form).then(function (response) {\n              if (response.statusCode === 200) {\n                _this6.$message({\n                  message: '修改成功',\n                  type: 'success'\n                });\n\n                _this6.open = false;\n\n                _this6.getList();\n              }\n            });\n          } else {\n            (0, _tasks.createTasks)(_this6.form).then(function (response) {\n              if (response.statusCode === 200) {\n                _this6.$message({\n                  message: '新增成功',\n                  type: 'success'\n                });\n\n                _this6.open = false;\n\n                _this6.getList();\n              }\n            });\n          }\n        }\n      });\n    },\n    // 显示搜索\n    handleSearch: function handleSearch() {\n      this.searchToggle = !this.searchToggle;\n    },\n    // 排序操作\n    handleSortable: function handleSortable(val) {\n      this.queryParams.orderby = val.prop;\n      this.queryParams.sort = val.order;\n      this.getList();\n    },\n    // 表单重置\n    reset: function reset() {\n      this.form = {\n        id: undefined,\n        name: undefined,\n        jobGroup: undefined,\n        assemblyName: undefined,\n        className: undefined,\n        jobParams: undefined,\n        triggerType: 1,\n        beginTime: undefined,\n        endTime: undefined,\n        intervalSecond: 1\n      };\n    },\n    // 自动计算分页 Id\n    handleIndexCalc: function handleIndexCalc(index) {\n      return (this.queryParams.pageIndex - 1) * this.queryParams.pageSize + index + 1;\n    },\n    // 取消按钮\n    cancel: function cancel() {\n      this.open = false;\n      this.reset();\n      this.getList();\n    }\n  }\n};\nexports.default = _default;",null]}