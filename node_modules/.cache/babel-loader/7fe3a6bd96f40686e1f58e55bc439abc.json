{"remainingRequest":"C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\src\\utils\\request.js","dependencies":[{"path":"C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\src\\utils\\request.js","mtime":1630326254213},{"path":"C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"C:/Users/Amazarashi/Documents/P_Project/Clothes/\\u540E\\u53F0/Design/Meiam.System/Meiam.System.Web/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _store = _interopRequireDefault(require(\"../store\"));\n\nvar _elementUi = require(\"element-ui\");\n\nvar _auth = require(\"@/utils/auth\");\n\nvar service = _axios.default.create({\n  // api 的 base_url\n  baseURL: process.env.VUE_APP_BASE_API,\n  timeout: 30000 // 请求超时时间\n\n}); // const pending = [] // 声明一个数组用于存储每个ajax请求的取消函数和ajax标识\n// const CancelToken = axios.CancelToken\n// const removeRepeatUrl = (ever) => {\n//   for (const p in pending) {\n//     if (pending[p].u === ever.url + '&' + ever.method) { // 当当前请求在数组中存在时执行函数体\n//       pending[p].f() // 执行取消操作\n//       pending.splice(p, 1) // 把这条记录从数组中移除\n//     }\n//   }\n// }\n// request拦截器\n\n\nservice.interceptors.request.use(function (config) {\n  // removeRepeatUrl(config)\n  // config.cancelToken = new CancelToken((c) => {\n  //   // 自定义唯一标识\n  //   pending.push({ u: config.url + '&' + config.method, f: c })\n  // })\n  if ((0, _auth.getToken)()) {\n    // 让每个请求携带自定义token 请根据实际情况自行修改\n    config.headers['SYSTOKEN'] = (0, _auth.getToken)();\n  }\n\n  return config;\n}, function (error) {\n  Promise.reject(error);\n}); // response 拦截器\n\nservice.interceptors.response.use(function (response) {\n  // removeRepeatUrl(response.config)\n  // 延续 Token 时间\n  var SysToken = (0, _auth.getToken)();\n\n  if (SysToken) {\n    (0, _auth.setToken)(SysToken);\n  }\n\n  var res = response.data;\n\n  if (res.statusCode !== 200) {\n    switch (res.statusCode) {\n      case 401:\n        _elementUi.MessageBox.confirm('登录状态已过期，您可以继续留在该页面，或者重新登录', '系统提示', {\n          confirmButtonText: '重新登录',\n          cancelButtonText: '取消',\n          type: 'warning'\n        }).then(function () {\n          _store.default.dispatch('LogOut').then(function () {\n            location.reload();\n          });\n        });\n\n        break;\n\n      case 403:\n        _elementUi.Notification.error({\n          title: '您无权进行此操作，请求执行已拒绝',\n          duration: 3000\n        });\n\n        break;\n\n      default:\n        _elementUi.Notification.error({\n          title: res.message\n        });\n\n        break;\n    }\n  }\n\n  return res;\n}, function (error) {\n  _elementUi.Notification.error({\n    title: '请求接口失败',\n    duration: 3000\n  });\n\n  return Promise.reject(error);\n});\nvar _default = service;\nexports.default = _default;",null]}