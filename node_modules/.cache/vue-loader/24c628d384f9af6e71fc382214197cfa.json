{"remainingRequest":"C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\src\\views\\system\\tasks\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\src\\views\\system\\tasks\\index.vue","mtime":1630326254242},{"path":"C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport {\r\n  queryTasks,\r\n  createTasks,\r\n  updateTasks,\r\n  deleteTasks,\r\n  startTasks,\r\n  stopTasks\r\n} from '@/api/system/tasks'\r\nexport default {\r\n  name: 'tasks',\r\n  data() {\r\n    var cronValidate = (rule, value, callback) => {\r\n      if (this.form.triggerType === 1) {\r\n        if (value === '' || value === undefined) {\r\n          callback(new Error('运行时间表达式不能为空!'))\r\n        } else {\r\n          callback()\r\n        }\r\n      } else {\r\n        callback()\r\n      }\r\n    }\r\n    var beginTimeValidate = (rule, value, callback) => {\r\n      if (this.form.triggerType === 0) {\r\n        if (value === '' || value === undefined) {\r\n          callback(new Error('选择开始日期!'))\r\n        } else {\r\n          callback()\r\n        }\r\n      } else {\r\n        callback()\r\n      }\r\n    }\r\n    var endTimeValidate = (rule, value, callback) => {\r\n      if (this.form.triggerType === 0) {\r\n        if (value === '' || value === undefined) {\r\n          callback(new Error('选择结束日期!'))\r\n        } else {\r\n          callback()\r\n        }\r\n      } else {\r\n        callback()\r\n      }\r\n    }\r\n    var intervalSecondValidate = (rule, value, callback) => {\r\n      if (this.form.triggerType === 0) {\r\n        if (value === '' || value === undefined) {\r\n          callback(new Error('请设置执行间隔!'))\r\n        } else {\r\n          callback()\r\n        }\r\n      } else {\r\n        callback()\r\n      }\r\n    }\r\n    return {\r\n      // 是否显示弹出层\r\n      open: false,\r\n      // 表单\r\n      form: {},\r\n      // 表单标题\r\n      title: '',\r\n      // 显示搜索\r\n      searchToggle: true,\r\n      // 表格高度\r\n      tableHeight: window.innerHeight,\r\n      // 合计条数\r\n      total: 0,\r\n      // 遮罩层\r\n      loading: true,\r\n      // 查询参数\r\n      queryParams: {\r\n        queryText: undefined,\r\n        pageIndex: 1,\r\n        pageSize: 10,\r\n        orderby: 'createTime',\r\n        sort: 'descending'\r\n      },\r\n      // 计划任务列表\r\n      dataTasks: [],\r\n      // 触发器类型\r\n      triggerTypeOptions: [\r\n        {\r\n          label: 'Simple / [普通]',\r\n          value: 0\r\n        },\r\n        {\r\n          label: 'Cron / [表达式]',\r\n          value: 1\r\n        }\r\n      ],\r\n      // 表单校验\r\n      rules: {\r\n        name: [\r\n          { required: true, message: '任务名称不能为空', trigger: 'blur' }\r\n        ],\r\n        jobGroup: [\r\n          { required: true, message: '任务分组不能为空', trigger: 'blur' }\r\n        ],\r\n        assemblyName: [\r\n          { required: true, message: '程序集名称不能为空', trigger: 'blur' }\r\n        ],\r\n        className: [\r\n          { required: true, message: '任务类名不能为空', trigger: 'blur' }\r\n        ],\r\n        triggerType: [\r\n          { required: true, message: '请选择触发器类型', trigger: 'blur' }\r\n        ],\r\n        cron: [{ validator: cronValidate, trigger: 'blur' }],\r\n        beginTime: [{ validator: beginTimeValidate, trigger: 'blur' }],\r\n        endTime: [{ validator: endTimeValidate, trigger: 'blur' }],\r\n        intervalSecond: [\r\n          { validator: intervalSecondValidate, type: 'number', trigger: 'blur' }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.getList()\r\n  },\r\n  methods: {\r\n    /** 查询计划任务列表 */\r\n    getList() {\r\n      this.loading = true\r\n      queryTasks(this.queryParams).then(response => {\r\n        this.dataTasks = response.data.dataSource\r\n        this.total = response.data.totalCount\r\n        this.loading = false\r\n      })\r\n    },\r\n    handleQuery() {\r\n      this.getList()\r\n    },\r\n    /** 重置按钮操作 */\r\n    handleReset() {\r\n      this.queryParams.queryText = ''\r\n      this.getList()\r\n    },\r\n    /** 新增按钮操作 */\r\n    handleCreate() {\r\n      this.reset()\r\n      this.open = true\r\n      this.title = '添加计划任务'\r\n    },\r\n    /** 修改按钮操作 */\r\n    handleUpdate(row) {\r\n      this.reset()\r\n      this.form = row\r\n      this.open = true\r\n      this.title = '修改计划任务'\r\n    },\r\n    // 启动按钮\r\n    handleStart(row) {\r\n      startTasks(row.id).then(response => {\r\n        if (response.statusCode === 200) {\r\n          this.$message({\r\n            message: response.message,\r\n            type: 'success'\r\n          })\r\n          this.open = false\r\n          this.getList()\r\n        }\r\n      })\r\n    },\r\n    // 停止按钮\r\n    handleStop(row) {\r\n      stopTasks(row.id).then(response => {\r\n        if (response.statusCode === 200) {\r\n          this.$message({\r\n            message: response.message,\r\n            type: 'success'\r\n          })\r\n          this.open = false\r\n          this.getList()\r\n        }\r\n      })\r\n    },\r\n    /** 删除按钮操作 */\r\n    handleDelete(row) {\r\n      this.$confirm('是否确认删除名称为\"' + row.name + '\"的计划任务?', '警告', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      })\r\n        .then(() => {\r\n          deleteTasks(row.id).then(response => {\r\n            if (response.statusCode === 200) {\r\n              this.getList()\r\n              this.$message({\r\n                message: '删除成功',\r\n                type: 'success'\r\n              })\r\n            }\r\n          })\r\n        })\r\n        .catch(function() {})\r\n    },\r\n    /** 提交按钮 */\r\n    submitForm: function() {\r\n      this.$refs['form'].validate(valid => {\r\n        if (valid) {\r\n          if (this.form.id !== undefined) {\r\n            updateTasks(this.form).then(response => {\r\n              if (response.statusCode === 200) {\r\n                this.$message({\r\n                  message: '修改成功',\r\n                  type: 'success'\r\n                })\r\n                this.open = false\r\n                this.getList()\r\n              }\r\n            })\r\n          } else {\r\n            createTasks(this.form).then(response => {\r\n              if (response.statusCode === 200) {\r\n                this.$message({\r\n                  message: '新增成功',\r\n                  type: 'success'\r\n                })\r\n                this.open = false\r\n                this.getList()\r\n              }\r\n            })\r\n          }\r\n        }\r\n      })\r\n    },\r\n    // 显示搜索\r\n    handleSearch() {\r\n      this.searchToggle = !this.searchToggle\r\n    },\r\n    // 排序操作\r\n    handleSortable(val) {\r\n      this.queryParams.orderby = val.prop\r\n      this.queryParams.sort = val.order\r\n      this.getList()\r\n    },\r\n    // 表单重置\r\n    reset() {\r\n      this.form = {\r\n        id: undefined,\r\n        name: undefined,\r\n        jobGroup: undefined,\r\n        assemblyName: undefined,\r\n        className: undefined,\r\n        jobParams: undefined,\r\n        triggerType: 1,\r\n        beginTime: undefined,\r\n        endTime: undefined,\r\n        intervalSecond: 1\r\n      }\r\n    },\r\n    // 自动计算分页 Id\r\n    handleIndexCalc(index) {\r\n      return (\r\n        (this.queryParams.pageIndex - 1) * this.queryParams.pageSize + index + 1\r\n      )\r\n    },\r\n    // 取消按钮\r\n    cancel() {\r\n      this.open = false\r\n      this.reset()\r\n      this.getList()\r\n    }\r\n  }\r\n}\r\n",null]}