{"remainingRequest":"C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\src\\views\\users\\users\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\src\\views\\users\\users\\index.vue","mtime":1630326254251},{"path":"C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Amazarashi\\Documents\\P_Project\\Clothes\\后台\\Design\\Meiam.System\\Meiam.System.Web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport {\r\n  queryUsers,\r\n  createUser,\r\n  updateUser,\r\n  deleteUsers,\r\n  enableUsers,\r\n  resetPassword\r\n} from '@/api/users/users'\r\nimport { GetRelationTree, UpdateUserRelation } from '@/api/system/authorize'\r\nexport default {\r\n  name: 'users',\r\n  data() {\r\n    return {\r\n      // 遮罩层\r\n      loading: false,\r\n      // 默认选项卡\r\n      activeName: 'userInfo',\r\n      // 表格高度\r\n      tableHeight: window.innerHeight,\r\n      // 单选框\r\n      radio: '1',\r\n      // 搜索条显示\r\n      searchToggle: true,\r\n      // 合计条数\r\n      total: 0,\r\n      // 用户信息弹出框\r\n      divShow: 'query',\r\n      // 修改密码弹出框\r\n      openPassword: false,\r\n      // 查询参数\r\n      queryParams: {\r\n        queryText: undefined,\r\n        pageIndex: 1,\r\n        pageSize: 10,\r\n        orderby: 'createTime',\r\n        sort: 'descending'\r\n      },\r\n      // 用户列表\r\n      userTable: [],\r\n      // 用户角色列表\r\n      userRoleTable: [],\r\n      // 删除用户列表\r\n      delSelections: [],\r\n      // 查询用户列表\r\n      userSelections: [],\r\n      // 用户权限树\r\n      relationTree: [],\r\n      // 用户角色\r\n      userRole: [],\r\n      // 表单\r\n      form: {},\r\n      // 密码表单\r\n      passwordForm: {},\r\n      // 表单标题\r\n      title: '',\r\n      // 表单校验\r\n      rules: {\r\n        userID: [\r\n          { required: true, message: '用户编号不能为空', trigger: 'blur' }\r\n        ],\r\n        userName: [\r\n          { required: true, message: '用户名称不能为空', trigger: 'blur' }\r\n        ],\r\n        password: [\r\n          { required: true, message: '用户密码不能为空', trigger: 'blur' },\r\n          { min: 6, message: '用户密码长度至少6位', trigger: 'blur' }\r\n        ],\r\n        sex: [{ required: true, message: '性别不能为空', trigger: 'blur' }]\r\n      },\r\n      // 重置密码表单校验\r\n      passwordRules: {\r\n        password: [\r\n          { required: true, message: '用户密码不能为空', trigger: 'blur' },\r\n          { min: 6, message: '用户密码长度至少6位', trigger: 'blur' }\r\n        ],\r\n        confirmPassword: [\r\n          { required: true, message: '确认密码不能为空', trigger: 'blur' },\r\n          { min: 6, message: '用户密码长度至少6位', trigger: 'blur' }\r\n        ]\r\n      },\r\n      // 重置密码用户\r\n      ResetPasswordUserId: '',\r\n      // 过滤查询\r\n      search: '',\r\n      defaultProps: {\r\n        children: 'children',\r\n        label: 'relationName'\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.getList()\r\n  },\r\n  methods: {\r\n    handleSearch() {\r\n      this.searchToggle = !this.searchToggle\r\n    },\r\n    /** 查询菜单列表 */\r\n    getList() {\r\n      this.loading = true\r\n      queryUsers(this.queryParams).then(response => {\r\n        this.userTable = response.data\r\n        this.total = this.userTable.totalCount\r\n        this.loading = false\r\n      })\r\n    },\r\n    /** 新增按钮操作 */\r\n    handleCreate() {\r\n      this.reset()\r\n      this.divShow = 'edit'\r\n      this.title = '添加用户'\r\n      this.activeName = 'userInfo'\r\n    },\r\n\r\n    /** 修改按钮操作 */\r\n    handleUpdate(row) {\r\n      this.reset()\r\n      this.form = row\r\n      delete this.form.password\r\n      this.divShow = 'edit'\r\n      this.title = '编辑用户'\r\n      this.activeName = 'userInfo'\r\n    },\r\n    /** 搜索按钮操作 */\r\n    handleQuery() {\r\n      this.getList()\r\n    },\r\n    /** 重置按钮操作 */\r\n    handleReset() {\r\n      this.queryParams.queryText = ''\r\n      this.getList()\r\n    },\r\n    // 删除按钮操作\r\n    handleDelete() {\r\n      this.delSelections = []\r\n      this.$refs.userTable.selection.forEach(element => {\r\n        this.delSelections.push(element.userID)\r\n      })\r\n      if (this.delSelections.length === 0) {\r\n        return\r\n      }\r\n      this.$confirm(\r\n        '是否确认删除选中的 ' + this.delSelections.length + ' 条数据?',\r\n        '警告',\r\n        {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning'\r\n        }\r\n      )\r\n        .then(() => {\r\n          deleteUsers({\r\n            userIds: this.delSelections\r\n          }).then(response => {\r\n            if (response.statusCode === 200) {\r\n              this.$message({\r\n                message: '成功删除' + response.data + '条数据',\r\n                type: 'success'\r\n              })\r\n              this.getList()\r\n            }\r\n          })\r\n        })\r\n        .catch(() => {})\r\n    },\r\n    // 重置密码\r\n    handleResetPassword(row) {\r\n      this.ResetPasswordUserId = row.userID\r\n      this.reset()\r\n      this.openPassword = true\r\n    },\r\n    // 启用用户\r\n    handleEnableUsers() {\r\n      if (this.$refs.userTable.selection.length > 0) {\r\n        this.userSelections = []\r\n        this.$refs.userTable.selection.forEach(element => {\r\n          this.userSelections.push(element.userID)\r\n        })\r\n        enableUsers({\r\n          userIds: this.userSelections,\r\n          status: true\r\n        }).then(response => {\r\n          if (response.statusCode === 200) {\r\n            this.$message({\r\n              message: '修改成功',\r\n              type: 'success'\r\n            })\r\n            this.getList()\r\n          }\r\n        })\r\n      } else {\r\n        this.$message({\r\n          message: '请至少选择一项',\r\n          type: 'warning'\r\n        })\r\n      }\r\n    },\r\n    // 禁用用户\r\n    handleDisabledUsers() {\r\n      if (this.$refs.userTable.selection.length > 0) {\r\n        this.userSelections = []\r\n        this.$refs.userTable.selection.forEach(element => {\r\n          this.userSelections.push(element.userID)\r\n        })\r\n        enableUsers({\r\n          userIds: this.userSelections,\r\n          status: false\r\n        }).then(response => {\r\n          if (response.statusCode === 200) {\r\n            this.$message({\r\n              message: '修改成功',\r\n              type: 'success'\r\n            })\r\n            this.getList()\r\n          }\r\n        })\r\n      } else {\r\n        this.$message({\r\n          message: '请至少选择一项',\r\n          type: 'warning'\r\n        })\r\n      }\r\n    },\r\n    // 新建用户提交按钮\r\n    submitUserForm() {\r\n      this.$refs['form'].validate(valid => {\r\n        if (valid) {\r\n          if (this.title !== '添加用户') {\r\n            updateUser(this.form).then(response => {\r\n              if (response.statusCode === 200) {\r\n                this.$message({\r\n                  message: '修改成功',\r\n                  type: 'success'\r\n                })\r\n                this.divShow = 'query'\r\n                this.getList()\r\n              }\r\n            })\r\n          } else {\r\n            createUser(this.form).then(response => {\r\n              if (response.statusCode === 200) {\r\n                this.$message({\r\n                  message: '新增成功',\r\n                  type: 'success'\r\n                })\r\n                this.title = '编辑用户'\r\n                this.getList()\r\n              }\r\n            })\r\n          }\r\n        }\r\n      })\r\n    },\r\n    // 用户角色提交按钮\r\n    submitRoleForm() {},\r\n    // 用户权限提交按钮\r\n    submitPowerForm() {\r\n      const relation = []\r\n      this.$refs.relationTree.selection.forEach(val => {\r\n        relation.push({\r\n          objectID: val.id,\r\n          objectType: val.relationType\r\n        })\r\n      })\r\n      UpdateUserRelation({\r\n        userID: this.form.userID,\r\n        relation: relation\r\n      }).then(response => {\r\n        if (response.statusCode === 200) {\r\n          this.$message({\r\n            message: '更新权限成功',\r\n            type: 'success'\r\n          })\r\n        } else {\r\n          this.$message.error(response.message)\r\n        }\r\n      })\r\n    },\r\n    // 用户绑定微信提交按钮\r\n    submitWexinForm() {},\r\n    // 排序操作\r\n    handleSortable(val) {\r\n      this.queryParams.orderby = val.prop\r\n      this.queryParams.sort = val.order\r\n      this.getList()\r\n    },\r\n    // 重置密码提交\r\n    submitPasswordForm() {\r\n      this.$refs['passwordForm'].validate(valid => {\r\n        if (valid) {\r\n          if (\r\n            this.passwordForm.password !== this.passwordForm.confirmPassword\r\n          ) {\r\n            this.$message.error('两次密码输入不一致')\r\n            return\r\n          }\r\n          resetPassword({\r\n            userID: this.ResetPasswordUserId,\r\n            confirmPassword: this.passwordForm.password\r\n          }).then(response => {\r\n            if (response.statusCode === 200) {\r\n              this.$message({\r\n                message: '密码重置成功',\r\n                type: 'success'\r\n              })\r\n              this.openPassword = false\r\n            } else {\r\n              this.$message.error(response.message)\r\n            }\r\n          })\r\n        }\r\n      })\r\n    },\r\n    // 表单重置\r\n    reset() {\r\n      this.form = {\r\n        userID: undefined,\r\n        userName: undefined,\r\n        nickName: undefined,\r\n        email: undefined,\r\n        password: undefined,\r\n        sex: '男',\r\n        avatarUrl: undefined,\r\n        qq: undefined,\r\n        phone: undefined,\r\n        provinceID: undefined,\r\n        province: undefined,\r\n        cityID: undefined,\r\n        city: undefined,\r\n        countyID: undefined,\r\n        county: undefined,\r\n        address: undefined,\r\n        remark: undefined,\r\n        identityCard: undefined,\r\n        birthday: undefined,\r\n        enabled: true,\r\n        oneSession: true\r\n      }\r\n      this.passwordForm = {\r\n        password: undefined,\r\n        confirmPassword: undefined\r\n      }\r\n    },\r\n    // 取消按钮\r\n    cancel() {\r\n      this.divShow = 'query'\r\n      this.openPassword = false\r\n      this.reset()\r\n      this.getList()\r\n    },\r\n    // 全选勾选\r\n    handleRelationTreeSelectAll() {\r\n      this.selectionParentRowAll(this.relationTree)\r\n    },\r\n    // 全选\r\n    selectionParentRowAll(data, selection) {\r\n      if (data) {\r\n        data.forEach(val => {\r\n          this.$refs.relationTree.toggleRowSelection(val, true)\r\n          if (val.children) {\r\n            this.selectionParentRowAll(val.children)\r\n          }\r\n        })\r\n      }\r\n    },\r\n    // RelationTree 勾选行\r\n    handleRelationTreeSelect(selection, row) {\r\n      if (selection.length && selection.indexOf(row) !== -1) {\r\n        this.selectionParentRow(row.parentUID, this.relationTree)\r\n      } else {\r\n        // 父节点取消时取消子节点勾选\r\n        this.unselectionRow(row)\r\n      }\r\n    },\r\n    // 递归勾选\r\n    selectionParentRow(parentUID, data) {\r\n      data.forEach(row => {\r\n        if (row.id === parentUID) {\r\n          this.$refs.relationTree.toggleRowSelection(row, true)\r\n          if (row.parentUID) {\r\n            this.selectionParentRow(row.parentUID, this.relationTree)\r\n          }\r\n          return\r\n        }\r\n        if (row.children) {\r\n          this.selectionParentRow(parentUID, row.children)\r\n        }\r\n      })\r\n    },\r\n    // 取消勾选\r\n    unselectionRow(row) {\r\n      if (row.children) {\r\n        row.children.forEach(children => {\r\n          this.$refs.relationTree.toggleRowSelection(children, false)\r\n          if (children) {\r\n            this.unselectionRow(children)\r\n          }\r\n        })\r\n      }\r\n    },\r\n    // 用户权限修改\r\n    handleTabsClick(val) {\r\n      if (val.index === '1') {\r\n        this.loading = true\r\n        GetRelationTree(this.form.userID).then(response => {\r\n          this.relationTree = response.data\r\n          this.selectUserRole(this.relationTree)\r\n          this.loading = false\r\n        })\r\n      }\r\n    },\r\n    // 匹配用户权限勾选\r\n    selectUserRole(data) {\r\n      if (data) {\r\n        data.forEach(val => {\r\n          if (val.hasRelation) {\r\n            this.$nextTick(() => {\r\n              this.$refs.relationTree.toggleRowSelection(val, true)\r\n            })\r\n          }\r\n          if (val) {\r\n            this.selectUserRole(val.children)\r\n          }\r\n        })\r\n      }\r\n    },\r\n    // row样式赋值\r\n    tableRowClassName(row, rowIndex) {\r\n      switch (row.row.relationType) {\r\n        case 'Company':\r\n          return 'company-row'\r\n        case 'Factory':\r\n          return 'factory-row'\r\n        case 'WorkShop':\r\n          return 'workShop-row'\r\n        case 'ProductLine':\r\n          return 'productLine-row'\r\n        case 'ProductProcess':\r\n          return 'productProcess-row'\r\n        default:\r\n          break\r\n      }\r\n    }\r\n  }\r\n}\r\n",null]}